package com.vanskarner.analysistracking.computervision

import android.graphics.Bitmap
import android.graphics.BitmapFactory
import androidx.test.platform.app.InstrumentationRegistry
import com.vanskarner.analysistracking.LeafState
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.runTest
import org.junit.Test
import org.junit.Assert.*
import kotlin.math.exp
import kotlin.math.pow

@OptIn(ExperimentalCoroutinesApi::class)
class MobileNetV2ClassificationTest {

    @Test
    fun predictionUsingAutogeneratedModelWithBacterialSpot() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val image = loadImage("bacterial_spot.jpg")
        val predictionResult = useMobilenetV2WithAutogeneratedModel(appContext, image)
        val content = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, content.leafState)
        assertEquals("bacterial_spot", content.bestPrediction.first)
        assertTrue(content.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, content.predictions.size)
    }

    @Test
    fun predictionUsingAutogeneratedModelWithEarlyBlight() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val image = loadImage("early_blight.jpg")
        val predictionResult = useMobilenetV2WithAutogeneratedModel(appContext, image)
        val content = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, content.leafState)
        assertEquals("early_blight", content.bestPrediction.first)
        assertTrue(content.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, content.predictions.size)
    }

    @Test
    fun predictionUsingAutogeneratedModelWithHealthy() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val image = loadImage("healthy.jpg")
        val predictionResult = useMobilenetV2WithAutogeneratedModel(appContext, image)
        val content = predictionResult.getOrThrow()

        assertEquals(LeafState.Healthy, content.leafState)
        assertEquals("Healthy", content.bestPrediction.first)
        assertTrue(content.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, content.predictions.size)
    }

    @Test
    fun predictionUsingAutogeneratedModelWithLateBlight() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val image = loadImage("late_blight.jpg")
        val predictionResult = useMobilenetV2WithAutogeneratedModel(appContext, image)
        val content = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, content.leafState)
        assertEquals("late_blight", content.bestPrediction.first)
        assertTrue(content.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, content.predictions.size)
    }

    @Test
    fun predictionUsingAutogeneratedModelWithLeafMold() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val image = loadImage("leaf_mold.jpg")
        val predictionResult = useMobilenetV2WithAutogeneratedModel(appContext, image)
        val content = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, content.leafState)
        assertEquals("leaf_mold", content.bestPrediction.first)
        assertTrue(content.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, content.predictions.size)
    }

    @Test
    fun predictionUsingAutogeneratedModelWithMosaicVirus() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val image = loadImage("mosaic_virus.jpg")
        val predictionResult = useMobilenetV2WithAutogeneratedModel(appContext, image)
        val content = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, content.leafState)
        assertEquals("mosaic_virus", content.bestPrediction.first)
        assertTrue(content.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, content.predictions.size)
    }

    @Test
    fun predictionUsingAutogeneratedModelWithSeptoriaLeafSpot() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val image = loadImage("septoria_leaf_spot.jpg")
        val predictionResult = useMobilenetV2WithAutogeneratedModel(appContext, image)
        val content = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, content.leafState)
        assertEquals("septoria_leaf_spot", content.bestPrediction.first)
        assertTrue(content.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, content.predictions.size)
    }

    @Test
    fun predictionUsingAutogeneratedModelWithTargetSpot() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val image = loadImage("target_spot.jpg")
        val predictionResult = useMobilenetV2WithAutogeneratedModel(appContext, image)
        val content = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, content.leafState)
        assertEquals("target_spot", content.bestPrediction.first)
        assertTrue(content.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, content.predictions.size)
    }

    @Test
    fun predictionUsingAutogeneratedModelWithTwoSpottedSpiderMite() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val image = loadImage("twospotted_spider_mite.jpg")
        val predictionResult = useMobilenetV2WithAutogeneratedModel(appContext, image)
        val content = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, content.leafState)
        assertEquals("twospotted_spider_mite", content.bestPrediction.first)
        assertTrue(content.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, content.predictions.size)
    }

    @Test
    fun predictionUsingAutogeneratedModelWithYellowLeafCurlVirus() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val image = loadImage("yellow_leaf_curl_virus.jpg")
        val predictionResult = useMobilenetV2WithAutogeneratedModel(appContext, image)
        val content = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, content.leafState)
        assertEquals("yellow_leaf_curl_virus", content.bestPrediction.first)
        assertTrue(content.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, content.predictions.size)
    }

    @Test
    fun predictionUsingInterpreterWithBacterialSpot() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val bacterialSpotImage = loadImage("bacterial_spot.jpg")
        val predictionResult = useMobilenetV2WithInterpreter(appContext, bacterialSpotImage)
        val result = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, result.leafState)
        assertEquals("bacterial_spot", result.bestPrediction.first)
        assertTrue(result.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, result.predictions.size)
    }

    @Test
    fun predictionUsingInterpreterWithEarlyBlight() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val bacterialSpotImage = loadImage("early_blight.jpg")
        val predictionResult = useMobilenetV2WithInterpreter(appContext, bacterialSpotImage)
        val result = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, result.leafState)
        assertEquals("early_blight", result.bestPrediction.first)
        assertTrue(result.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, result.predictions.size)
    }

    @Test
    fun predictionUsingInterpreterWithHealthy() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val bacterialSpotImage = loadImage("healthy.jpg")
        val predictionResult = useMobilenetV2WithInterpreter(appContext, bacterialSpotImage)
        val result = predictionResult.getOrThrow()

        assertEquals(LeafState.Healthy, result.leafState)
        assertEquals("Healthy", result.bestPrediction.first)
        assertTrue(result.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, result.predictions.size)
    }

    @Test
    fun predictionUsingInterpreterWithLateBlight() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val bacterialSpotImage = loadImage("late_blight.jpg")
        val predictionResult = useMobilenetV2WithInterpreter(appContext, bacterialSpotImage)
        val result = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, result.leafState)
        assertEquals("late_blight", result.bestPrediction.first)
        assertTrue(result.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, result.predictions.size)
    }

    @Test
    fun predictionUsingInterpreterWithLeafMold() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val bacterialSpotImage = loadImage("leaf_mold.jpg")
        val predictionResult = useMobilenetV2WithInterpreter(appContext, bacterialSpotImage)
        val result = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, result.leafState)
        assertEquals("leaf_mold", result.bestPrediction.first)
        assertTrue(result.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, result.predictions.size)
    }

    @Test
    fun predictionUsingInterpreterWithMosaicVirus() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val bacterialSpotImage = loadImage("mosaic_virus.jpg")
        val predictionResult = useMobilenetV2WithInterpreter(appContext, bacterialSpotImage)
        val result = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, result.leafState)
        assertEquals("mosaic_virus", result.bestPrediction.first)
        assertTrue(result.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, result.predictions.size)
    }

    @Test
    fun predictionUsingInterpreterWithSeptoriaLeafSpot() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val bacterialSpotImage = loadImage("septoria_leaf_spot.jpg")
        val predictionResult = useMobilenetV2WithInterpreter(appContext, bacterialSpotImage)
        val result = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, result.leafState)
        assertEquals("septoria_leaf_spot", result.bestPrediction.first)
        assertTrue(result.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, result.predictions.size)
    }

    @Test
    fun predictionUsingInterpreterWithTargetSpot() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val bacterialSpotImage = loadImage("target_spot.jpg")
        val predictionResult = useMobilenetV2WithInterpreter(appContext, bacterialSpotImage)
        val result = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, result.leafState)
        assertEquals("target_spot", result.bestPrediction.first)
        assertTrue(result.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, result.predictions.size)
    }

    @Test
    fun predictionUsingInterpreterWithTwoSpottedSpiderMite() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val bacterialSpotImage = loadImage("twospotted_spider_mite.jpg")
        val predictionResult = useMobilenetV2WithInterpreter(appContext, bacterialSpotImage)
        val result = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, result.leafState)
        assertEquals("twospotted_spider_mite", result.bestPrediction.first)
        assertTrue(result.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, result.predictions.size)
    }

    @Test
    fun predictionUsingInterpreterWithYellowLeafCurlVirus() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val bacterialSpotImage = loadImage("yellow_leaf_curl_virus.jpg")
        val predictionResult = useMobilenetV2WithInterpreter(appContext, bacterialSpotImage)
        val result = predictionResult.getOrThrow()

        assertEquals(LeafState.Sick, result.leafState)
        assertEquals("yellow_leaf_curl_virus", result.bestPrediction.first)
        assertTrue(result.bestPrediction.second in 0.90f..0.99f)
        assertEquals(10, result.predictions.size)
    }

    @Test
    fun predictionUsingImageList() = runTest {
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        val imgList = listOf(
            loadImage("bacterial_spot.jpg"),
            loadImage("early_blight.jpg"),
            loadImage("healthy.jpg"),
            loadImage("late_blight.jpg"),
            loadImage("leaf_mold.jpg"),
            loadImage("mosaic_virus.jpg"),
            loadImage("septoria_leaf_spot.jpg"),
            loadImage("target_spot.jpg"),
            loadImage("twospotted_spider_mite.jpg"),
            loadImage("yellow_leaf_curl_virus.jpg")
        )
        val resultados = useMobilenetV2WithInterpreter(appContext, imgList)
        val listadeLista = resultados.toList().chunked(10)
        listadeLista.forEach {
            val listasoftmax = softmax(it.toFloatArray())
            val listaFormateada = listasoftmax.map { itemSoft -> formatToNDecimals(itemSoft, 2) }
            println("listadeLista -> " + listaFormateada.joinToString(", "))
        }
    }

    @Throws(Exception::class)
    private fun loadImage(fileName: String): Bitmap {
        val instrumentation = InstrumentationRegistry.getInstrumentation()
        val assetManager = instrumentation.context.assets
        val inputStream = assetManager.open(fileName)
        return BitmapFactory.decodeStream(inputStream)
    }

}

private fun softmax(predictions: FloatArray): FloatArray {
    val max = predictions.maxOrNull() ?: 0.0f
    val expValues = predictions.map { exp((it - max)) }
    val sumExpValues = expValues.sum()
    return expValues.map { (it / sumExpValues) }.toFloatArray()
}

private fun formatToNDecimals(value: Float, decimals: Int): Float {
    val factor = 10.0.pow(decimals.toDouble()).toFloat()
    return (value * factor).toInt().toFloat() / factor
}