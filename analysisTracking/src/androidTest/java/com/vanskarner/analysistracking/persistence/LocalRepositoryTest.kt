package com.vanskarner.analysistracking.persistence

import androidx.room.Room
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.filters.SmallTest
import androidx.test.platform.app.InstrumentationRegistry
import com.vanskarner.analysistracking.AnalysisDetailData
import com.vanskarner.analysistracking.AnalysisError
import com.vanskarner.analysistracking.BoundingBoxData
import com.vanskarner.analysistracking.ClassificationData
import com.vanskarner.analysistracking.LeafState
import kotlinx.coroutines.test.runTest
import org.junit.After
import org.junit.Assert.*
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import java.util.Date

@RunWith(AndroidJUnit4::class)
@SmallTest
class LocalRepositoryTest {
    private lateinit var testDB: TestRoomDB
    private lateinit var defaultRepository: DefaultRepository

    @Before
    fun setUp() {
        val context = InstrumentationRegistry.getInstrumentation().targetContext
        testDB = Room.inMemoryDatabaseBuilder(context, TestRoomDB::class.java)
            .addTypeConverter(BoundingBoxesConverter())
            .addTypeConverter(ClassificationsConverter())
            .build()
        defaultRepository = DefaultRepository(testDB.activityLogDao())
    }

    @After
    fun tearDown() {
        testDB.close()
    }

    @Test
    fun saveItem_savedAndFoundItem() = runTest {
        val actualItem = exampleData()
        val savedId = defaultRepository.saveAnalysis(actualItem).getOrThrow()
        val expectedItem = defaultRepository.findAnalysis(savedId).getOrThrow()

        assertEquals(savedId, expectedItem.id) //id is autogenerated
        assertEquals(expectedItem.imagePath, actualItem.imagePath)
        assertEquals(expectedItem.date, actualItem.date)
        assertEquals(expectedItem.detectionInferenceTimeMs, actualItem.detectionInferenceTimeMs)
        assertEquals(
            expectedItem.classificationInferenceTimeMs,
            actualItem.classificationInferenceTimeMs
        )
        assertEquals(expectedItem.note, actualItem.note)
        assertEquals(expectedItem.numberDiseasesIdentified, actualItem.numberDiseasesIdentified)
        assertEquals(
            expectedItem.listLeafBoxCoordinates.size,
            actualItem.listLeafBoxCoordinates.size
        )
        assertEquals(expectedItem.listLeafBoxCoordinates[0], actualItem.listLeafBoxCoordinates[0])
        assertEquals(expectedItem.classificationData.size, actualItem.classificationData.size)
        assertEquals(expectedItem.classificationData[0], actualItem.classificationData[0])
        assertEquals(expectedItem.leafDetectionModel, actualItem.leafDetectionModel)
        assertEquals(expectedItem.leafClassificationModel, actualItem.leafClassificationModel)
        assertEquals(expectedItem.threadsUsed, actualItem.threadsUsed)
        assertEquals(expectedItem.processing, actualItem.processing)
    }

    @Test
    fun findAnalysis_withInvalidId_returnNotFoundError() = runTest {
        val exception = defaultRepository.findAnalysis(33).exceptionOrNull()

        assertTrue(exception is AnalysisError.NotFound)
    }

    @Test
    fun getAnalysisList_withSavedItems_returnList() = runTest {
        val item1 = exampleData()
        val item2 = exampleData()
        defaultRepository.saveAnalysis(item1).getOrThrow()
        defaultRepository.saveAnalysis(item2).getOrThrow()
        val expectedList = defaultRepository.getAnalysisList().getOrThrow()

        assertEquals(2, expectedList.size)
        assertEquals(1, expectedList[0].id)
        assertEquals(2, expectedList[1].id)
    }

    @Test
    fun getAnalysisList_noSavedItems_returnEmptyList() = runTest {
        val list = defaultRepository.getAnalysisList().getOrThrow()

        assertTrue(list.isEmpty())
    }

    @Test
    fun updateAnalysisNote_withValidId_updatedNote() = runTest {
        val item = exampleData()
        val unexpectedNote = item.note
        val expectedNote = "a new note"
        defaultRepository.saveAnalysis(item).getOrThrow()
        defaultRepository.updateAnalysisNote(1, expectedNote).getOrThrow()
        val actualItem = defaultRepository.findAnalysis(1).getOrThrow()

        assertNotEquals(unexpectedNote, actualItem.note)
        assertEquals(expectedNote, actualItem.note)
    }

    @Test
    fun updateAnalysisNote_withInvalidId_returnNotFoundError() = runTest {
        val exception = defaultRepository
            .updateAnalysisNote(33, "Some note")
            .exceptionOrNull()

        assertTrue(exception is AnalysisError.NotFound)
    }

    @Test
    fun deleteAnalysis_allItems_returnEmptyList() = runTest {
        val ids = listOf(1, 2)
        val item1 = exampleData()
        val item2 = exampleData()
        defaultRepository.saveAnalysis(item1).getOrThrow()
        defaultRepository.saveAnalysis(item2).getOrThrow()
        defaultRepository.deleteAnalysis(ids).getOrThrow()
        val list = defaultRepository.getAnalysisList().getOrThrow()

        assertTrue(list.isEmpty())
    }

    @Test
    fun deleteAnalysis_someItems_returnList() = runTest {
        val ids = listOf(2)
        val item1 = exampleData()
        val item2 = exampleData()
        defaultRepository.saveAnalysis(item1).getOrThrow()
        defaultRepository.saveAnalysis(item2).getOrThrow()
        defaultRepository.deleteAnalysis(ids).getOrThrow()
        val list = defaultRepository.getAnalysisList().getOrThrow()

        assertEquals(1, list.size)
    }

    private fun exampleData(): AnalysisDetailData {
        return AnalysisDetailData(
            id = 0,
            imagePath = "/Android/data/com.vanskarner.tomatecare/files/Pictures/Plant_7809504466231131920.jpg",
            date = Date(),
            detectionInferenceTimeMs = 2500,
            classificationInferenceTimeMs = 2500,
            note = "A note",
            numberDiseasesIdentified = 3,
            listLeafBoxCoordinates = listOf(
                BoundingBoxData(
                    0.00333f,
                    0.00333f,
                    0.00333f,
                    0.00333f,
                    0.00333f,
                    0.00333f,
                    0.00333f,
                    0.00333f,
                    0.95f,
                    1,
                    "leaf"
                )
            ),
            classificationData = listOf(
                ClassificationData(
                    LeafState.Sick,
                    Pair("bacterial_spot", 0.95f),
                    listOf(
                        Pair("bacterial_spot", 0.95f),
                        Pair("early_blight", 0.0f),
                        Pair("healthy", 0.0f),
                        Pair("late_blight", 0.01f),
                        Pair("leaf_mold", 0.01f),
                        Pair("mosaic_virus", 0.0f),
                        Pair("septoria_leaf_spot", 0.01f),
                        Pair("target_spot", 0.0f),
                        Pair("twospotted_spider_mite", 0.01f),
                        Pair("yellow_leaf_curl_virus", 0.01f),
                    )
                )
            ),
            leafDetectionModel = "YoloV8",
            leafClassificationModel = "MobileNetV2",
            threadsUsed = "4",
            processing = "CPU"
        )
    }

}